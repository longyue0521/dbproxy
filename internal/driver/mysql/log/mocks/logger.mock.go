// Code generated by MockGen. DO NOT EDIT.
// Source: ./types.go
//
// Generated by this command:
//
//	mockgen -source=./types.go -destination=mocks/logger.mock.go -package=logmocks -typed logger
//
// Package logmocks is a generated GoMock package.
package logmocks

import (
	context "context"
	slog "log/slog"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Mocklogger is a mock of logger interface.
type Mocklogger struct {
	ctrl     *gomock.Controller
	recorder *MockloggerMockRecorder
}

// MockloggerMockRecorder is the mock recorder for Mocklogger.
type MockloggerMockRecorder struct {
	mock *Mocklogger
}

// NewMocklogger creates a new mock instance.
func NewMocklogger(ctrl *gomock.Controller) *Mocklogger {
	mock := &Mocklogger{ctrl: ctrl}
	mock.recorder = &MockloggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocklogger) EXPECT() *MockloggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *Mocklogger) Debug(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockloggerMockRecorder) Debug(msg any, args ...any) *loggerDebugCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*Mocklogger)(nil).Debug), varargs...)
	return &loggerDebugCall{Call: call}
}

// loggerDebugCall wrap *gomock.Call
type loggerDebugCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *loggerDebugCall) Return() *loggerDebugCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *loggerDebugCall) Do(f func(string, ...any)) *loggerDebugCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *loggerDebugCall) DoAndReturn(f func(string, ...any)) *loggerDebugCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DebugContext mocks base method.
func (m *Mocklogger) DebugContext(ctx context.Context, msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "DebugContext", varargs...)
}

// DebugContext indicates an expected call of DebugContext.
func (mr *MockloggerMockRecorder) DebugContext(ctx, msg any, args ...any) *loggerDebugContextCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugContext", reflect.TypeOf((*Mocklogger)(nil).DebugContext), varargs...)
	return &loggerDebugContextCall{Call: call}
}

// loggerDebugContextCall wrap *gomock.Call
type loggerDebugContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *loggerDebugContextCall) Return() *loggerDebugContextCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *loggerDebugContextCall) Do(f func(context.Context, string, ...any)) *loggerDebugContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *loggerDebugContextCall) DoAndReturn(f func(context.Context, string, ...any)) *loggerDebugContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Enabled mocks base method.
func (m *Mocklogger) Enabled(ctx context.Context, level slog.Level) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enabled", ctx, level)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Enabled indicates an expected call of Enabled.
func (mr *MockloggerMockRecorder) Enabled(ctx, level any) *loggerEnabledCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enabled", reflect.TypeOf((*Mocklogger)(nil).Enabled), ctx, level)
	return &loggerEnabledCall{Call: call}
}

// loggerEnabledCall wrap *gomock.Call
type loggerEnabledCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *loggerEnabledCall) Return(arg0 bool) *loggerEnabledCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *loggerEnabledCall) Do(f func(context.Context, slog.Level) bool) *loggerEnabledCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *loggerEnabledCall) DoAndReturn(f func(context.Context, slog.Level) bool) *loggerEnabledCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Error mocks base method.
func (m *Mocklogger) Error(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockloggerMockRecorder) Error(msg any, args ...any) *loggerErrorCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*Mocklogger)(nil).Error), varargs...)
	return &loggerErrorCall{Call: call}
}

// loggerErrorCall wrap *gomock.Call
type loggerErrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *loggerErrorCall) Return() *loggerErrorCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *loggerErrorCall) Do(f func(string, ...any)) *loggerErrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *loggerErrorCall) DoAndReturn(f func(string, ...any)) *loggerErrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ErrorContext mocks base method.
func (m *Mocklogger) ErrorContext(ctx context.Context, msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ErrorContext", varargs...)
}

// ErrorContext indicates an expected call of ErrorContext.
func (mr *MockloggerMockRecorder) ErrorContext(ctx, msg any, args ...any) *loggerErrorContextCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorContext", reflect.TypeOf((*Mocklogger)(nil).ErrorContext), varargs...)
	return &loggerErrorContextCall{Call: call}
}

// loggerErrorContextCall wrap *gomock.Call
type loggerErrorContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *loggerErrorContextCall) Return() *loggerErrorContextCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *loggerErrorContextCall) Do(f func(context.Context, string, ...any)) *loggerErrorContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *loggerErrorContextCall) DoAndReturn(f func(context.Context, string, ...any)) *loggerErrorContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Handler mocks base method.
func (m *Mocklogger) Handler() slog.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler")
	ret0, _ := ret[0].(slog.Handler)
	return ret0
}

// Handler indicates an expected call of Handler.
func (mr *MockloggerMockRecorder) Handler() *loggerHandlerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*Mocklogger)(nil).Handler))
	return &loggerHandlerCall{Call: call}
}

// loggerHandlerCall wrap *gomock.Call
type loggerHandlerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *loggerHandlerCall) Return(arg0 slog.Handler) *loggerHandlerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *loggerHandlerCall) Do(f func() slog.Handler) *loggerHandlerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *loggerHandlerCall) DoAndReturn(f func() slog.Handler) *loggerHandlerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Info mocks base method.
func (m *Mocklogger) Info(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockloggerMockRecorder) Info(msg any, args ...any) *loggerInfoCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*Mocklogger)(nil).Info), varargs...)
	return &loggerInfoCall{Call: call}
}

// loggerInfoCall wrap *gomock.Call
type loggerInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *loggerInfoCall) Return() *loggerInfoCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *loggerInfoCall) Do(f func(string, ...any)) *loggerInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *loggerInfoCall) DoAndReturn(f func(string, ...any)) *loggerInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InfoContext mocks base method.
func (m *Mocklogger) InfoContext(ctx context.Context, msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "InfoContext", varargs...)
}

// InfoContext indicates an expected call of InfoContext.
func (mr *MockloggerMockRecorder) InfoContext(ctx, msg any, args ...any) *loggerInfoContextCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfoContext", reflect.TypeOf((*Mocklogger)(nil).InfoContext), varargs...)
	return &loggerInfoContextCall{Call: call}
}

// loggerInfoContextCall wrap *gomock.Call
type loggerInfoContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *loggerInfoContextCall) Return() *loggerInfoContextCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *loggerInfoContextCall) Do(f func(context.Context, string, ...any)) *loggerInfoContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *loggerInfoContextCall) DoAndReturn(f func(context.Context, string, ...any)) *loggerInfoContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Warn mocks base method.
func (m *Mocklogger) Warn(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockloggerMockRecorder) Warn(msg any, args ...any) *loggerWarnCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*Mocklogger)(nil).Warn), varargs...)
	return &loggerWarnCall{Call: call}
}

// loggerWarnCall wrap *gomock.Call
type loggerWarnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *loggerWarnCall) Return() *loggerWarnCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *loggerWarnCall) Do(f func(string, ...any)) *loggerWarnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *loggerWarnCall) DoAndReturn(f func(string, ...any)) *loggerWarnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WarnContext mocks base method.
func (m *Mocklogger) WarnContext(ctx context.Context, msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "WarnContext", varargs...)
}

// WarnContext indicates an expected call of WarnContext.
func (mr *MockloggerMockRecorder) WarnContext(ctx, msg any, args ...any) *loggerWarnContextCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarnContext", reflect.TypeOf((*Mocklogger)(nil).WarnContext), varargs...)
	return &loggerWarnContextCall{Call: call}
}

// loggerWarnContextCall wrap *gomock.Call
type loggerWarnContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *loggerWarnContextCall) Return() *loggerWarnContextCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *loggerWarnContextCall) Do(f func(context.Context, string, ...any)) *loggerWarnContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *loggerWarnContextCall) DoAndReturn(f func(context.Context, string, ...any)) *loggerWarnContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// With mocks base method.
func (m *Mocklogger) With(args ...any) *slog.Logger {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "With", varargs...)
	ret0, _ := ret[0].(*slog.Logger)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockloggerMockRecorder) With(args ...any) *loggerWithCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*Mocklogger)(nil).With), args...)
	return &loggerWithCall{Call: call}
}

// loggerWithCall wrap *gomock.Call
type loggerWithCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *loggerWithCall) Return(arg0 *slog.Logger) *loggerWithCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *loggerWithCall) Do(f func(...any) *slog.Logger) *loggerWithCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *loggerWithCall) DoAndReturn(f func(...any) *slog.Logger) *loggerWithCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithGroup mocks base method.
func (m *Mocklogger) WithGroup(name string) *slog.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithGroup", name)
	ret0, _ := ret[0].(*slog.Logger)
	return ret0
}

// WithGroup indicates an expected call of WithGroup.
func (mr *MockloggerMockRecorder) WithGroup(name any) *loggerWithGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithGroup", reflect.TypeOf((*Mocklogger)(nil).WithGroup), name)
	return &loggerWithGroupCall{Call: call}
}

// loggerWithGroupCall wrap *gomock.Call
type loggerWithGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *loggerWithGroupCall) Return(arg0 *slog.Logger) *loggerWithGroupCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *loggerWithGroupCall) Do(f func(string) *slog.Logger) *loggerWithGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *loggerWithGroupCall) DoAndReturn(f func(string) *slog.Logger) *loggerWithGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
